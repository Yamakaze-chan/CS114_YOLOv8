# -*- coding: utf-8 -*-
"""YOLOv8v2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CCcZr-QSW1lCsNdbRVp7xih-tFW1pYKG
"""

# Commented out IPython magic to ensure Python compatibility.
from google.colab import drive
drive.mount('/content/drive')
# %cd "/content/drive/MyDrive/CS114"

!pip install ultralytics

#import library
from ultralytics import YOLO
import numpy as np
from PIL import Image
import cv2
from google.colab.patches import cv2_imshow
import torch
import matplotlib.pyplot as plt

dict_char = {
    0:0,
    1:1,
    2:2,
    3:3,
    4:4,
    5:5,
    6:6,
    7:7,
    8:8,
    9:9,
    10: 'A',
    11: 'C',
    12: 'D',
    13: 'E',
    14: 'G',
    15: 'H',
    16: 'K',
    17: 'R',
    18: 'S',
}

#set Model to detect License plate
model = YOLO("/content/drive/MyDrive/CS114/runs/detect/train5/weights/best.pt")
# set model parameters
model.overrides['conf'] = 0.45  # NMS confidence threshold
model.overrides['iou'] = 0.45  # NMS IoU threshold

#set Model to detect character
model_char = YOLO("/content/drive/MyDrive/CS114/runs/detect/train6/weights/best.pt")
# set model parameters
model_char.overrides['conf'] = 0.85  # NMS confidence threshold
model_char.overrides['iou'] = 0.45  # NMS IoU threshold

def resize_img (image):
  h, w,_ = image.shape
  new_h = 256//h #256
  new_w = 256//w
  scale_num = max(new_h, new_w)
  width = int(image.shape[1] * scale_num)
  height = int(image.shape[0] * scale_num)
  dim = (width, height)
  ROI = cv2.resize(image, dim,interpolation = cv2.INTER_AREA)
  return ROI

def check_row(box1, box2):
    yi1 = max(box1[1],box2[1])
    yi2 = min(box1[3],box2[3])
    inter_area = (yi2-yi1)
  
    box1_area = (box1[3]-box1[1])
    box2_area = (box2[3]-box2[1])
    union_area = box1_area+box2_area-inter_area
    
    iou = inter_area/union_area
    
    return iou

def Read_LP(image, option):

  #image = cv2.imread(path_img)
  #cv2_imshow(image)
  result=model.predict(image,save=False, save_txt=False, save_crop=False) #predict image and add bounding box
  arr_of_coor = []
  list_roi = []
  class_ls = []
  index = 0
  for i in result:
    print(i)
  
  #add coordinates to list
  for i in result:
    for j in i.boxes:
      arr_of_coor.append(sum(j.xyxy.tolist(),[])) #flatten
      class_ls.append(int(j.cls.item()))


  if option == 1:
    for i in arr_of_coor:
      i = list(map(int, i))
      x1 = i[0]
      y1 = i[1]
      x2 = i[2]
      y2 = i[3]
      ROI = image[y1:y2, x1:x2]

      ROI = resize_img(ROI)

      read_LP(ROI)
  elif option == 2:
    for i in arr_of_coor:
      i = list(map(int, i))
      if (class_ls[index] == 1):
        cv2.rectangle(image, (i[0],i[1]), (i[2],i[3]), (255, 0, 0),3)
      elif (class_ls[index] == 2):
        cv2.rectangle(image, (i[0],i[1]), (i[2],i[3]), (0, 255, 0),3)
      elif (class_ls[index] == 3):
        cv2.rectangle(image, (i[0],i[1]), (i[2],i[3]), (0, 0, 255),3)
      elif (class_ls[index] == 4):
        cv2.rectangle(image, (i[0],i[1]), (i[2],i[3]), (234, 221, 202),3)
      elif (class_ls[index] == 5):
        cv2.rectangle(image, (i[0],i[1]), (i[2],i[3]), (159, 43, 104),3)
      index = index + 1
    cv2_imshow(image)

#RUN THIS
#image = cv2.imread("/content/download (59).png")
def read_LP(image):
  
  #model_char = YOLO("/content/drive/MyDrive/CS114/runs/detect/train6/weights/best.pt")
  # set model parameters
  #model_char.overrides['conf'] = 0.85  # NMS confidence threshold
  #model_char.overrides['iou'] = 0.45  # NMS IoU threshold
  #
  #path_img_char = "/content/download (69).png"
  kernel = np.ones((2,2),np.uint8)
  image = cv2.dilate(image,kernel,iterations = 2)

  result_char=model_char.predict(image,save=False, save_txt=False, save_crop=False)

  

  arr_of_coor_char = []
  cls_list = []

  for i in result_char:
    for j in i.boxes:
      
      arr_of_coor_char.append(sum(j.xyxy.tolist(),[])) #flatten
      cls_list.append(int(j.cls.item()))

  #RUN THIS
  index = 0
  LP_char_ls = []
  highest_box = (0,0,0,0)
  lowest_box = (10000,10000,10000,10000)
  for i in arr_of_coor_char:
    #convert to int
    i = list(map(int, i))
    #print(i)

    if i[1] < lowest_box[1]:
      lowest_box = (i[0],i[1],i[2],i[3])
    if i[3] > highest_box[3]:
      highest_box = (i[0],i[1],i[2],i[3])
    LP_char_ls.append(((i[0],i[1],i[2],i[3]),cls_list[index]))
    index=index+1
    #cv2.rectangle(image, (i[0],i[1]), (i[2],i[3]), (255, 0, 0),1)


  row = check_row(lowest_box,highest_box )
  #print(row)
  if row>0:
    #neu chi co 1 dong thi doc tu trai sang phai
    LP_char_ls=sorted(LP_char_ls,key=lambda l:l[0][0], reverse=False)
    #print([i[1] for i in LP_char_ls])
    for i in LP_char_ls:
      temp = i[1]+0
      print(dict_char[temp],end='')
  else:
    #neu co 2 dong thi doc tu tren xuong
    LP_char_ls=sorted(LP_char_ls,key=lambda l:l[0][3], reverse=False)
    #print(LP_char_ls)
    print([i[1] for i in LP_char_ls])
    for i in LP_char_ls:
      temp = i[1]+0
      print(dict_char[temp],end='')
  cv2_imshow(image)

#imput_of_file = 
#path = "/content/drive/MyDrive/CS114/picture/Capture (41).PNG"
path = "/content/Capture (84).PNG"
src = cv2.imread(path)
#cv2_imshow(src)
#img = resize_img(src)
#print(img)
Read_LP(src,1)

"""Tài liệu tham khảo: 
https://github.com/ultralytics/ultralytics 

https://docs.ultralytics.com/

https://www.youtube.com/watch?v=wuZtUMEiKWY

https://www.youtube.com/watch?v=Mpsdby8zCTY

"""

